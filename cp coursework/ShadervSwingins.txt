cbuffer WaveParams
{
    float time;          
    float maxHeight;      
    float intensity;     
    float frequency;      
};

cbuffer staticMeshBuffer
{
    matrix W;    
    matrix VP;   
};

struct VS_INPUT
{
    float4 Pos : POSITION;       
    float3 Normal : NORMAL;      
    float3 Tangent : TANGENT;    
    float2 TexCoords : TEXCOORD; 

    float3 InstancePosition : INSTANCE_POSITION;
    float InstancePadding : INSTANCE_PADDING; 
};

struct PS_INPUT
{
    float4 Pos : SV_POSITION;    
    float3 Normal : NORMAL;      
    float3 Tangent : TANGENT;    
    float2 TexCoords : TEXCOORD; 
};


PS_INPUT VS(VS_INPUT input)
{
    PS_INPUT output;

    float3 worldPos = input.Pos.xyz + input.InstancePosition;

    if (worldPos.y > maxHeight)
    {
        float heightFactor = (worldPos.y - maxHeight); 
        float offsetX = sin(time * frequency + worldPos.x) * intensity * heightFactor;
        float offsetZ = cos(time * frequency + worldPos.z) * intensity * heightFactor;

        worldPos.x += offsetX;
        worldPos.z += offsetZ;
    }


    float4 worldPosition = mul(float4(worldPos, 1.0f), W);

    output.Pos = mul(worldPosition, VP);

        output.Normal = mul(input.Normal, (float3x3)W);
    output.Tangent = normalize(mul(input.Tangent, (float3x3)W));
    output.TexCoords = input.TexCoords;


    return output;
}
