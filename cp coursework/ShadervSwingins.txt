cbuffer WaveParams
{
    float time;          
    float maxHeight;      
    float intensity;     
    float frequency;      
};

cbuffer staticMeshBuffer
{
    float4x4 VP;         
};

struct VS_INPUT
{
    float4 Pos : POSITION;       // 顶点位置
    float3 Normal : NORMAL;      // 顶点法线
    float3 Tangent : TANGENT;    // 顶点切线
    float2 TexCoords : TEXCOORD; // 纹理坐标
    float4x4 World : WORLD;      // 实例的世界矩阵
};

struct PS_INPUT
{
    float4 Pos : SV_POSITION;    // 最终的顶点位置
    float3 Normal : NORMAL;      // 变换后的法线
    float3 Tangent : TANGENT;    // 变换后的切线
    float2 TexCoords : TEXCOORD; // 传递的纹理坐标
};

PS_INPUT VS(VS_INPUT input)
{
    PS_INPUT output;

    // 计算顶点的世界位置
    float4 worldPos = mul(input.Pos, input.World);

    // 如果超出 maxHeight，添加摇晃效果
    if (worldPos.y > maxHeight)
    {
        float heightFactor = (worldPos.y - maxHeight); 
        float offsetX = sin(time * frequency + worldPos.x) * intensity * heightFactor;
        float offsetZ = cos(time * frequency + worldPos.z) * intensity * heightFactor;

        worldPos.x += offsetX;
        worldPos.z += offsetZ;
    }

    // 将世界位置变换到剪裁空间
    output.Pos = mul(worldPos, VP);

    // 法线和切线变换
    float3x3 normalMatrix = (float3x3)input.World;
    output.Normal = normalize(mul(input.Normal, normalMatrix));
    output.Tangent = normalize(mul(input.Tangent, normalMatrix));

    // 直接传递纹理坐标
    output.TexCoords = input.TexCoords;

    return output;
}
