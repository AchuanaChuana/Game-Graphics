Texture2D tex : register(t0);
Texture2D normalMap : register(t1); 
SamplerState samplerLinear : register(s0);

struct PS_INPUT
{
    float4 Pos : SV_POSITION;
    float3 Normal : NORMAL;
    float3 Tangent : TANGENT;
    float2 TexCoords : TEXCOORD;
};

float4 PS(PS_INPUT input) : SV_Target0
{
    float3 normalTex = normalMap.Sample(samplerLinear, input.TexCoords).rgb;

    float3 normalMapped = normalize(normalTex * 2.0 - 1.0);

    float3 tangent = normalize(input.Tangent);
    float3 bitangent = cross(input.Normal, tangent);
    float3x3 TBN = float3x3(tangent, bitangent, input.Normal);

    float3 worldNormal = normalize(mul(normalMapped, TBN));

    float3 lightDir = normalize(float3(0.5, -1.0, -0.5)); 

    float3 ambientLight = float3(0.5, 0.5, 0.5); 

    float diffuse = max(dot(worldNormal, lightDir), 0.0);
    float3 diffuseLight = float3(1.0, 1.0, 1.0) * diffuse * 1.5; 

    float4 colour = tex.Sample(samplerLinear, input.TexCoords);

    if (colour.a < 0.5)
    {
        discard; 
    }


    float3 finalColor = (ambientLight + diffuseLight) * colour.rgb;
    return float4(finalColor, 1.0);
}
