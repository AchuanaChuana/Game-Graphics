cbuffer WaveParams
{
    float time;          
    float maxHeight;      
    float intensity;    
    float frequency;      
};

cbuffer staticMeshBuffer
{
    float4x4 W;           
    float4x4 VP;          
};

struct VS_INPUT
{
    float4 Pos : POSITION;     
    float3 Normal : NORMAL;    
    float3 Tangent : TANGENT;  
    float2 TexCoords : TEXCOORD; 
};

struct PS_INPUT
{
    float4 Pos : SV_POSITION;    
    float3 Normal : NORMAL;   
    float3 Tangent : TANGENT;   
    float2 TexCoords : TEXCOORD;  
};

PS_INPUT VS(VS_INPUT input)
{
    PS_INPUT output;

    float4 worldPos = mul(input.Pos, W);

    if (worldPos.y > maxHeight)
    {
        // Calculate wobble offset based on time, frequency, and intensity
        float heightFactor = (worldPos.y - maxHeight); // Factor proportional to height above maxHeight
        float offsetX = sin(time * frequency + worldPos.x) * intensity * heightFactor;
        float offsetZ = cos(time * frequency + worldPos.z) * intensity * heightFactor;

        worldPos.x += offsetX;
        worldPos.z += offsetZ;
    }

    output.Pos = mul(worldPos, VP);
    output.Normal = mul(input.Normal, (float3x3)W);
    output.Tangent = normalize(mul(input.Tangent, (float3x3)W));
    output.TexCoords = input.TexCoords;

    return output;
}

