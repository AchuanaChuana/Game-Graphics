cbuffer WaveParams
{
    float time;           // Current time for dynamic movement
    float maxHeight;      // Height threshold for wobble effect
    float intensity;      // Intensity of the wobble
    float frequency;      // Frequency of the wobble
};

cbuffer staticMeshBuffer
{
    float4x4 W;           // World matrix
    float4x4 VP;          // View-Projection matrix
};

struct VS_INPUT
{
    float4 Pos : POSITION;     // Vertex position
    float3 Normal : NORMAL;    // Vertex normal
    float3 Tangent : TANGENT;  // Vertex tangent
    float2 TexCoords : TEXCOORD; // Texture coordinates
};

struct PS_INPUT
{
    float4 Pos : SV_POSITION;     // Position in clip space
    float3 Normal : NORMAL;       // Transformed normal
    float3 Tangent : TANGENT;     // Transformed tangent
    float2 TexCoords : TEXCOORD;  // Texture coordinates
};

PS_INPUT VS(VS_INPUT input)
{
    PS_INPUT output;

    // Transform vertex position to world space
    float4 worldPos = mul(input.Pos, W);

    // Apply wobble effect if the height (y) is greater than maxHeight
    if (worldPos.y > maxHeight)
    {
        // Calculate wobble offset based on time, frequency, and intensity
        float heightFactor = (worldPos.y - maxHeight); // Factor proportional to height above maxHeight
        float offsetX = sin(time * frequency + worldPos.x) * intensity * heightFactor;
        float offsetZ = cos(time * frequency + worldPos.z) * intensity * heightFactor;

        // Add wobble offsets to the position
        worldPos.x += offsetX;
        worldPos.z += offsetZ;
    }

    // Transform the position to clip space
    output.Pos = mul(worldPos, VP);

    // Transform normals and tangents into world space
    output.Normal = mul(input.Normal, (float3x3)W);
    output.Tangent = normalize(mul(input.Tangent, (float3x3)W));

    // Pass through texture coordinates
    output.TexCoords = input.TexCoords;

    return output;
}

